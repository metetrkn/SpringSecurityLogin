package se.mete.springinloggning.entity;


import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.Column;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import lombok.Data;
import java.util.Collection;
import java.util.Collections;


/**
 * @Entity = Marks this class as a table
 * @Data = Lombok annotation to automatically generate getters, setters etc
 * ApplicationUser class represents each user/row/record in table
 */
@Entity
@Table(name = "application_users") // Name of the table
@Data
public class ApplicationUser implements UserDetails {

    @Id // Primary key annotation
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Auto-generated ID
    private Long id;

    @Column(unique = true, nullable = false) // Ensures usernames are unique and can not be null
    private String username; // Username of the user

    @Column(nullable = false) // Ensures the password cannot be null
    private String password; // Password of user encoded

    @Column(nullable = false) // Ensures the role cannot be null
    private String role; // Role of the user (e.g., ROLE_USER, ROLE_ADMIN)


    /**
     * Empty constructor for JPA.
     */
    public ApplicationUser() {}


    /**
     * Parameterized constructor for ApplicationUser
     *
     * @param username Username of the user
     * @param password Password of the user
     * @param role Role of the user
     */
    public ApplicationUser(String username, String password, String role) {
        this.username = username;
        this.password = password;
        this.role = role;
    }


    // Getters and setters are automatically generated by Lombok's @Data annotation
    /**
     * Returns the authorities (roles) granted to the user.
     *
     * @return A collection of GrantedAuthority objects
     */
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        // Returns a singleton list containing the user's role as a GrantedAuthority
        return Collections.singletonList(new SimpleGrantedAuthority(role));
    }

    /**
     * Returns the password of the user.
     *
     * @return The password of the user
     */
    @Override
    public String getPassword() {
        return password;
    }

    /**
     * Returns the username of the user.
     *
     * @return The username of the user
     */
    @Override
    public String getUsername() {
        return username;
    }

    /**
     * Indicates whether the user's account has expired.
     *
     * @return true if the account is non-expired, false otherwise
     */
    @Override
    public boolean isAccountNonExpired() {
        return true; // Accounts are always non-expired
    }

    /**
     * Indicates whether the user's account is locked.
     *
     * @return true if the account is non-locked, false otherwise
     */
    @Override
    public boolean isAccountNonLocked() {
        return true; // Accounts are always non-locked
    }

    /**
     * Indicates whether the user's credentials (password) have expired.
     *
     * @return true if the credentials are non-expired, false otherwise
     */
    @Override
    public boolean isCredentialsNonExpired() {
        return true; // Credentials are always non-expired
    }

    /**
     * Indicates whether the user is enabled.
     *
     * @return true if the user is enabled, false otherwise
     */
    @Override
    public boolean isEnabled() {
        return true; // Users are always enabled
    }
}